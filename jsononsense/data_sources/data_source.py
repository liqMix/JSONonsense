from data_sources.iterators import get_iterators, APIIteratorCollection
from config import config


class DataSource:
    CONFIG = config["DATASOURCE"]
    """
        Contains the methods for retrieving the list of keys and values
        to be used to populate the JSON output

        By default, keys are generated by a random string iterator,
         and the keys are generated by a collection of iterators.
    """

    def __init__(self):
        types = DataSource.CONFIG["types"].split(',')
        self.key_source = get_iterators(types='str')
        self.val_source = get_iterators(types=types)
        
    def get_keys(self):
        return self.key_source

    def get_vals(self):
        return self.val_source

    @staticmethod
    def refresh_keys():
        pass

    @staticmethod
    def refresh_vals():
        pass


class APISource(DataSource):
    """
        Represents an API source for the keys and values
    """
    KEY_URLS = None
    VAL_URLS = None

    def __init__(self, key_source, val_source=None):
        super(APISource, self).__init__()

        if not isinstance(key_source, list):
            key_source = [key_source]

        APISource.KEY_URLS = key_source
        self.key_source = APIIteratorCollection(urls=APISource.KEY_URLS)

        if val_source:
            if not isinstance(val_source, list):
                val_source = [val_source]
            APISource.VAL_URLS = val_source
            self.val_source = APIIteratorCollection(urls=APISource.VAL_URLS)
        else:
            APISource.VAL_URLS = key_source
            self.val_source = self.key_source

    def refresh_keys(self):
        self.key_source = APIIteratorCollection(urls=APISource.KEY_URLS)

    def refresh_vals(self):
        self.val_source = APIIteratorCollection(urls=APISource.VAL_URLS)
